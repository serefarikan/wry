//[2017-04-20: Let's redo this file as an example of wComposer written in wry
// It's already started, but some of my ideas about the syntax have changed and this
// needs to be updated.]


// Helper class for constructing HTML elements
//
// copyright 2016 Mike Weaver
//
// license http://www.opensource.org/licenses/mit-license.html
//
// author Mike Weaver
// created 2016-03-23
//
// version 1.0

#include wCommon/wStandard

constants
	EOL = "\n"
	kContent = 'content'
	kAttribs = 'attribs'

//
XmlComposer
	fIndent = true
	fDebug = true
	sBuffer =  ''
	qeTags =  ()

	// Returns a string of tabs to indent the next element.
	sGetIndent = func
		guard fIndent else return ''
		(sBuffer ? constants.EOL : '') + "\t"->repeat(qeTags->count)

	// Begins an HTML element with an opening tag, pushing it onto the qeTags stack.
	// Balance each call to `beginElement` with a subsequent call to `endElement`.
	beginElement = func   //(e, arb?, s?, c?)
		e ?= $0
		sDent = sGetIndent()
		qeTags->push(e)
		sBuffer += sDent + sGetElement(e, ~arb, ~s, ~c)

	// Closes an open tag. Balance each call to `endElement` with a preceding call to `beginElement`.
	endElement = func
		e = qeTags->pop()
		guard e else return
		sDent = sGetIndent()
		sBuffer += sDent + "</\(e)>"

	// Composes a complete element, with opening and closing tag and content.
	addElement = func   //(e, arb?, s?, c?)
		e ?= $0
		s = sGetIndent()
		sBuffer += s + sGetElement(e, ~arb, ~s, ~c, fClose=true)

	// Used by both `addElement` and `beginElement` to generate the string of the element.
	sGetElement = func   //(e, arb?, s?, fClose?, c?)
		e ?= $0
		if c then arb.class = c
		RegisterClass(arb.class)
		sAttr = arb->filter()->map(sFromB)->implode(' ')
		sOut = '<' + e + sAttr->sPrefixIfCe(' ')
		if fIsEmptyElem(e)
			sOut += ' />'
		else
			sOut += '>' + s + (fClose ? "</\(e)> : '')
		return sOut

	fIsEmptyElem = func   //(e)
		e ?= $0
		are = ('area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source')
		return are->contains(e)
		resetBuffer
		sBuffer = ''

	// Adds a custom string `s`, with no alterations, to the internal buffer.
	addCustom = func   //(s)
		s ?= $0
		sBuffer += s

	// Returns the internal buffer where HTML has been composed. Optionally clears the buffer if `fReset` is true.
	sGet = func   //(fReset?=true)
		fReset ?= true
		defer if fReset then resetBuffer()
		return sBuffer

	resetBuffer = func
		sBuffer = ''

	//
	// !Registering class names in a static cache
	//

	mcnClasses@0 = ()

	registerClass = func   //(s)
		s ?= $0
		mcnClasses@0[s] += 1

	arcGetClasses = func
		return mcnClasses@0->keys

	resetClasses = func
		mcnClasses@0 = ()

	//
	// !Common constructions
	//

	sAreYouSure = func   //(s)
		s ?= $0
		return "javascript:return confirm('\(sAddSlashes(s))?')"

	cWarn = 'warn'

	sWarn = func   //(s)
		s ?= $0
		return "<span class=\"\(cWarn)\">\(s)</span>"

	cPlist = 'plist'
	cPair = 'pair'
	cPlname = 'plname'
	cPlvalue = 'plvalue'

	composePropertyList = func   // (arb)
		arb ?= $0
		guard arb else return
		beginElement('div', c=cPlist)
		for na, va in arb
			guard na && va else continue
			beginElement('div', c=cPair)
			addElement('div', c=cPlname, s=sKey)
			addElement('div', c=cPlvalue, s=sVal)
			endElement
		endElement


// This doesn't really work. We're not letting you initialize an array with a function call.
// But you can create an init function that you can call...
Link

	// or this could be create and we could call Link.create to return an object that is initialized with whatever a Link needs to be or have.
	init = func   //(s, href?, c?, arb?)
		$obj.s ?= $0 ?= 0
		$obj.class ?= c
		$obj.href ?= href

	create = func
		with $arg
			s ?= $0
			class ?= ''
			href ?= ''
		return $arg

	// Returns the string representation of the link. Creates a composer if one is not provided.
	toString   //(cp?)
		cp ?= XmlComposer()
		e = ( href ? 'a' : 'span' )
		return cp->getElement(e, ~arb, ~s, fClose=true)

my_link = Link->create('tickets page', c='alink', href='/tickets')
my_link->toString()->print()

// How do we make a special subclass, ActionLink, that defaults the class to 'alink'?
// let -> be "compose with" and <- "compose into" or "compose from" (or, "inherit from")
ActionLink <- Link#

	// we would use something like this if we wanted to call super.
	init = func
		init@Link(~~$arg)
		$obj.class ?= 'alink'

uSave = Url
uSave->init(ark=('ac', 'id'))
lSave = ActionLink
lSave->init('Save', href=uSave->sGet(), arb=('title':'Save item'))


// and maybe the parenthesis wouldn't be needed, but boy would that look strange, to have that arrow pointing off to nothing:

ActionLink = Link ->
	<override stuff here>

// so then the alternate syntax (without the surrounding parenthesis) would be
ActionLink <- Link
	<put overriding stuff here>

// A call like this thing->func(args) becomes thing$obj -> args$arg -> func
// so inside func is available the scope of `thing` and `args`.
// If you have args already in an array, you don't want to pass them in because they will become a single argument. Instead, compose:
// a = ( href="/images/banner", class="fl-left" )
// a->composeLink()
// composeLink(a.~href, a.~class)
// composeLink(~~a)

Url   //(sScheme?, sHost?, sPath?, arp?, ark?, sFrag?)

	sGet   //()
		sPath ?= sGetUrlPath()
		// merge the arp and ark arrays
		arp->append(ark->filterRequest())
		sp = arp->filter()->map(sFromP)->implode('&')->sPrefixIfCe('?')
		return sScheme->sSuffixIfCe('://') + sHost + spath + sp + sFrag->sPrefixIfCe('#')



// So here's an idea: Use colon when mapping a pair and both are strings or expressions that evaluate
// to strings. Use the = when the left hand side represents a variable or parameter name:
//      ( 'a' : 'find' )  ==>  ( 'a' : 'find' )
//      key = 'name'
//      ( key : 'fred' )  ==>  ( 'name' : 'fred' ) // `key` is evaluated
//      ( name='fred' )   ==>  ( 'name' : 'fred' ) // `name` is not evaluated, it's turned into a string
//      ( ~key )          ==>  ( 'key' : 'name' )  // `key` is turned into a string for the key, then evaluated for the value
//
// Conceptually, then, an assignment like `s = 'hello'` means the pair 's':'hello' is being added to the local scope dictionary.
// a bare statement like this: 's':'hello' would also work, with the same result. Using a colon means "add to whatever dictionary
// is under construction at the moment, evaluating both sides. Using equal sign means "add to whatever dictionary is under
// construction at the moment, but only evaluate the right-hand side and take the left hand side as the key name (as a literal string.)
// a tilde means ~XXX => XXX = XXX, so the left side is a literal, and the right side is evaluated.

//THOUGHTS:

Anything you compose on the left side of a function will get composed as $obj inside. If you compose multiple items, they will form a hierarchy:

	arr1->arr2->myfunc()

you can chain functions that return object, which will become the $obj to the next function:

	arr1->filter()->map(myMap)->implode(',')

suppose you have a function that returns a function, say `adder` and you want to compose with that result:

	myNums->(getAdder())()
	-or-
	adder = getAdder()
	myNums->adder()
	-or
	adder = getAdder()
	pre_compose = myNums->adder // this doesn't execute, but gets everything composed and ready to execute
	pre_compose()

That last one is interesting. It would let you run the same function on an array of args, for example

This is an explicit call:

	myobj->myobj.method()

which makes sure that method has myobj in its $obj scope.

But that is annoying, so we can just write

	myobj->method()

and myobj will implicitly be in method's $obj scope.

But it won't automatically be. if you copy it out:

	meth_copy = myobj.method

	meth_copy() // this won't have anything in the $obj scope.



//THOUGHTS:
//  flow control statements don't introduce new scope, so variables set in the 'then' or 'else' clause are available later

//IDEA: in places where we are declaring (typically, constructing an array that represents and object, or one that represents parameters)
//  we don't want to have to put quotes around all our keys, but not doing so would interpet as a variable name.
//  so how about if we start the name with an illegal character, like '.', to indicate "this is a key, put quotes around it".
//  it is conceptually similar to the idea that obj.fred translates into obj['fred'] where fred isn't treated as a variable,
//  but a name that needs to have quotes around it.

// It would be nice to be able to call addElement('p', .sClass: 'warn')
// and not have the second parameter 'class' be assigned to $1.
// And also not require class to come after all the other positional parameters which you would have to set to default values.
// Maybe we only assign to $0, $1, etc. if it is not a keyed item.
// Does this get into what the index and keys of an ordered hash are?
//  a = ( 'p', 10, 'name' : 'mike', 14, true)
// what is a[2]? is it 'mike' or is it 14? would you ever want to access 'mike' other than with the key?

//THOUGHTS about inheritance.
// How do we create a new instance? It isn't just a copy or a reference back to the same variable
// It's a new creature that is more like a version, it has it's own fields that can replace the parent, but the parent can
// still be retrieved with something like a:0:.fIndent. (Is the parent a copy? or is it a reference to the original?) Can any
// subclass change the parent? Maybe if the parent is assigned a key (like 'base') then others can reference and change it if they refer
// to the same version key. objects created without a key are anonymous and others can't change them.
// a = wHTMLComposer->new
// that seems like a lot of chrome just to get another instance.
// we want a not to be a copy, and not to point to the original,
// we want it to be a new version that can replace fields, but still get back to the original
//  if needed with, for example: a:-1:.fIndent

This statement

	cp->addElement('div')

means addElement function will be called with $obj equal to cp and $arg equal to ('div')
and also $0 will equal 'div', so $0 is the same as $arg[0]
we'll first look at the cp object for a member under `addElement` and use that, otherwise we'll
look in the current scope and up for `addElement`

Inside a function call we can explicitly use $obj to access the calling object (or it may be nil)
Inside the function, bare names will be checked against $arg and then $obj. Changes to a member of
$arg won't affect anything outside the function, but changes to $obj will affect that object.